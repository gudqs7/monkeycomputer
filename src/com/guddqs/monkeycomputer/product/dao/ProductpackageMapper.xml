<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guddqs.monkeycomputer.product.dao.ProductpackageMapper">
  <resultMap id="BaseResultMap" type="productpackage">
    <id column="ID" jdbcType="OTHER" property="id" />
    <result column="PRODUCTID" jdbcType="OTHER" property="productid" />
    <result column="DEFAULTID" jdbcType="OTHER" property="defaultid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, PRODUCTID, DEFAULTID
  </sql>
  
  
<!--   <select id="selectByExample" parameterType="productpackageExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from PRODUCTPACKAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select> -->
  
  <resultMap type="productpackage" id="packageMap" extends="BaseResultMap">
  	
  		<collection property="packagedetails" ofType="packagedetail">
  			<id column="did" property="id"/>
  			<result column="packageid" property="packageid"/>
  			<result column="price" property="price"/>
  			<result column="name" property="name"/>
  		</collection>
  	
  </resultMap>
  
  <select id="selectByExample" parameterType="productpackageExample" resultMap="packageMap">
    select 
	  pa.*,d.id did,d.packageid,d.name,d.price
	from productpackage pa
	join packagedetail d
	on d.packageid=pa.id
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  
  
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from PRODUCTPACKAGE
    where ID = #{id,jdbcType=OTHER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from PRODUCTPACKAGE
    where ID = #{id,jdbcType=OTHER}
  </delete>
  <delete id="deleteByExample" parameterType="productpackageExample">
    delete from PRODUCTPACKAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="productpackage">
    <selectKey resultType="int" order="BEFORE" keyProperty="id">
    	select seq_monkey.nextval from dual
    </selectKey>
    insert into PRODUCTPACKAGE (ID, PRODUCTID, DEFAULTID
      )
    values (#{id,jdbcType=OTHER}, #{productid,jdbcType=OTHER}, #{defaultid,jdbcType=OTHER}
      )
  </insert>
  <insert id="insertSelective" parameterType="productpackage">
    insert into PRODUCTPACKAGE
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="productid != null">
        PRODUCTID,
      </if>
      <if test="defaultid != null">
        DEFAULTID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=OTHER},
      </if>
      <if test="productid != null">
        #{productid,jdbcType=OTHER},
      </if>
      <if test="defaultid != null">
        #{defaultid,jdbcType=OTHER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="productpackageExample" resultType="java.lang.Integer">
    select count(*) from PRODUCTPACKAGE
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update PRODUCTPACKAGE
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=OTHER},
      </if>
      <if test="record.productid != null">
        PRODUCTID = #{record.productid,jdbcType=OTHER},
      </if>
      <if test="record.defaultid != null">
        DEFAULTID = #{record.defaultid,jdbcType=OTHER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update PRODUCTPACKAGE
    set ID = #{record.id,jdbcType=OTHER},
      PRODUCTID = #{record.productid,jdbcType=OTHER},
      DEFAULTID = #{record.defaultid,jdbcType=OTHER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="productpackage">
    update PRODUCTPACKAGE
    <set>
      <if test="productid != null">
        PRODUCTID = #{productid,jdbcType=OTHER},
      </if>
      <if test="defaultid != null">
        DEFAULTID = #{defaultid,jdbcType=OTHER},
      </if>
    </set>
    where ID = #{id,jdbcType=OTHER}
  </update>
  <update id="updateByPrimaryKey" parameterType="productpackage">
    update PRODUCTPACKAGE
    set PRODUCTID = #{productid,jdbcType=OTHER},
      DEFAULTID = #{defaultid,jdbcType=OTHER}
    where ID = #{id,jdbcType=OTHER}
  </update>
</mapper>